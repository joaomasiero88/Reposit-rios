### Modelo 1 CCMFUT_Trend
# Utilizando Preços de Fechamento x Médias móveis
# Análise para seguir tendência no ativo CCMFUT

# Imports
import pandas as pd
import numpy as np
from datetime import datetime
import yfinance as yf
import matplotlib.pyplot as plt
plt.style.use("fivethirtyeight") #estilo gráfico
# https://matplotlib.org/stable/gallery/style_sheets/style_sheets_reference.html

# Carrega a base
df = pd.read_excel("CCM_Historico.xlsx", index_col = "Data") #cotações fornecidas pela corretora
df = df.iloc[::-1] # tratamento: inverte a ordem do índice (começa no menor valor de data)
# Intervalo de Análise 1
inicio = "2016-01-01"
fim = "2023-01-01"
df = df.loc[inicio : fim] #intervalo

# Criando Média móvel 1 

ma1 = pd.DataFrame() #cria um dataframe com a média
p1 = 8 #período da média móvel
ma1["media1"] = df["Fechamento"].rolling(window = p1).mean() #cria média móvel aritmética de p1 períodos

# Criando um dataframe separado para criar a regra de negociação
df_regra = pd.DataFrame()
df_regra["Ativo"] = df["Fechamento"]
df_regra["media1"] = ma1["media1"]

# Cria a regra do sinal
def regra(base):
    preco_compra = []
    preco_venda = []
    aux = 1 #vai ajudar no somatório dos retornos se compra/venda: 1/-1

    for i in range(len(base)):
        if base["Ativo"][i] > base["media1"][i]: # para cada iteração, Se Fechamento > media1
            if aux != 1: #se aux != 1, pula pro else - evita first ongoing open trade
                preco_compra.append(base["Ativo"][i]) #adiciona o preço de fechamento na base
                preco_venda.append(np.nan) #adiciona not a number
                aux = 1 #aux torna 1
            else:
                preco_compra.append(np.nan) #add preço de compra como nan
                preco_venda.append(np.nan) #add preço venda como nan
        elif base["Ativo"][i] < base["media1"][i]: #senão se, fechamento < média1:
            if aux != 0: #se aux != 0:
                preco_compra.append(np.nan) #add preco compra como nan
                preco_venda.append(base["Ativo"][i])
                aux = 0 #aux torna 0
            else:
                preco_compra.append(np.nan) #nan
                preco_venda.append(np.nan) #nan
        else:
            preco_compra.append(np.nan) #nan
            preco_venda.append(np.nan) #nan
    return (preco_compra, preco_venda) #retorna ou preço_compra/preço_venda

# Armazena os valores
compra, venda = regra(df_regra) #cria duas variáveis com os valores do df_regra
sinal = pd.DataFrame() #cria df sinal
sinal["Compra"] = compra #df sinal recebe valores quando há compra
sinal["Venda"] = venda #df sinal recebe valores quando há venda
df_regra["Compra"] = compra #df_regra recebe valores quando há compra
df_regra["Venda"] = venda #df_regra recebe valores quando há venda

# Visualiza os cruzamentos(sinais)
